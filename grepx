#!/bin/bash

#Black        0;30     Dark Gray     1;30
#Red          0;31     Light Red     1;31
#Green        0;32     Light Green   1;32
#Brown/Orange 0;33     Yellow        1;33
#Blue         0;34     Light Blue    1;34
#Purple       0;35     Light Purple  1;35
#Cyan         0;36     Light Cyan    1;36
#Light Gray   0;37     White         1;37

NC='\033[0m' # No Color
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHT_GRAY='\033[0;37m'
DARK_GRAY='\033[1;30m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHT_BLUE='\033[1;34m'
LIGHT_PURPLE='\033[1;35m'
LIGHT_CYAN='\033[1;36m'
WHITE='\033[1;37m'

Usage()
{
    echo "Usage: $0 pattern"
    echo "When finishing search, you can press the [1-n/v/s/n/q] key,"
    echo "       1-n: press the number and open the file"
    echo "       v: open with vim"
    echo "       s: open with subl"
    echo "       n: open with notepad++"
    echo "       q: quit"
}

onClose()
{
    rm output_file &> /dev/null
    echo "exit"
    exit
}

onInterrupt()
{
    echo "Ctrl-c Interrupt"
    onClose
}

if [ $# -eq 0 ]; then
    Usage
    exit 1
fi

trap 'onInterrupt' INT # Ctrl-c sent SIGINT

# FIXME display wrong when one file matching, muti files match is ok.
DATA=$(find . \( -name '.?*' -o -name tags \) -prune -o -type f -exec grep -in "$1" {} +)
echo "$DATA" > output_file

if [ -z "$DATA" ]; then
    echo "No match, bye!"
    onClose
fi

# now remove training "\"
# otherwise the below "read line" will read two lines as one
sed -i 's/[\\]*$//g' output_file ## NOTE: it does not matter if there are spaces after '\' in source file

# process output_file
declare -a FILENAME
declare -a LINENUMBER

COUNT=0
while read line; do
    echo -ne "$WHITE""NO.$(( ++COUNT )):""$NC "
    FILENAME[$COUNT]=$(echo "$line" | awk -F":" '{print $1}')
    LINENUMBER[$COUNT]=$(echo "$line" | awk -F":" '{print $2}')

    LINECONTENT=$(echo "$line" | sed 's/^.*:[0-9]*://') ## .* matches any set of charaters
    # http://en.wikipedia.org/wiki/Regular_expression
    # "./FILENAME:LINENUMBER:LINECONTENT" -> "LINECONTENT"
    # can not use awk {print $3}, because we may have "http://www..."

    echo "${FILENAME[$COUNT]}:${LINENUMBER[$COUNT]}"
    echo "    $LINECONTENT" | grep -i --color "$1"
done < output_file

rm output_file

# choose
EDITOR="vim"
while [ 0 ]; do
    echo -n "Now which one do you want to open ($EDITOR)? [1-$COUNT/v/s/n/q] "
    read KEY
    if [ $KEY -gt 0 -a $KEY -lt $(($COUNT+1)) 2> /dev/null ]; then
        # stderr output when $KEY is not a number
        if [ "$EDITOR" == "vim" ]; then
            vim +${LINENUMBER[$KEY]} ${FILENAME[$KEY]}
        elif [ "$EDITOR" == "subl" ]; then
            subl ${FILENAME[$KEY]}:${LINENUMBER[$KEY]}
        elif [ "$EDITOR" == "notepad++" ]; then
            notepad++ ${FILENAME[$KEY]} -n${LINENUMBER[$KEY]}
        fi
    elif [ "$KEY" == "v" ]; then
        EDITOR="vim"
    elif [ "$KEY" == "s" ]; then
        EDITOR="subl"
    elif [ "$KEY" == "n" ]; then
        EDITOR="notepad++"
    elif [ "$KEY" == "q" ]; then
        onClose
    else
        echo "Wrong key, input again."
    fi
done
